@import "styles";

.taskList__container {
  position: relative;
}

.task__list {
  margin: 0;
  padding: 0;

  li {
    position: relative;
    @include border();
    background-color: get-color(main, main-500);
    @include paddingBox;
    font-size: max(1px, 1rem);
    color: get-color(base, dark);

    @include respondTo(tablet) {
      max-width: 76%;
      margin: 0 auto;
    }

    &:nth-child(even) {
      background-color: inherit;
      color: inherit;
    }

    p {
      display: inline-flex;
      margin: 0;
      font-size: 1rem;
      font-weight: 400;
    }
    time {
      display: inline-flex;
      margin: 0;
      font-size: 76%;
    }
  }
}

.taskInfo {
  display: grid;
  grid-template-columns: 1fr auto auto;

  gap: $margin;
  & :nth-child(2) {
    align-self: start;
  }
}

.checkbox {
  $completedColor: get-color(main, main-300);

  position: relative;
  $boxSize: 1em;

  /* ???? */
  [type="checkbox"] {
    &:active,
    &:checked:active {
      box-shadow: 0 1px 2px rgba(0, 0, 0, 0.5), inset 0px 1px 3px rgba(0, 0, 0, 0.1);
    }
  }

  /* Base for label styling */
  [type="checkbox"]:not(:checked),
  [type="checkbox"]:checked {
    cursor: pointer;
    position: absolute;
    left: 0;
    top: 0;
    opacity: 0.01;
  }
  [type="checkbox"]:not(:checked) + label,
  [type="checkbox"]:checked + label {
    position: relative;
    font-weight: 400;
    cursor: pointer;
  }

  [type="checkbox"]:checked + label {
    text-decoration: line-through;
    font-weight: 400;
    color: $completedColor;
    transition: all 0.275s;
  }

  /* checkbox aspect */
  [type="checkbox"]:not(:checked) + label:before,
  [type="checkbox"]:checked + label:before {
    position: relative;
    display: inline-block;
    margin-right: $margin * 0.5;
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05), inset 0px -15px 10px -12px rgba(0, 0, 0, 0.05);
    width: $boxSize;
    height: $boxSize;
    @include border($color: get-color(main, main-900));
    background: get-color(base, light);
    content: "";
    cursor: pointer;
    transition: all $duration;
    vertical-align: -7.6%;
  }
  [type="checkbox"]:checked + label:before {
    @include border();
    background-color: transparent;
  }

  /* checked mark aspect */
  [type="checkbox"]:not(:checked) + label:after,
  [type="checkbox"]:checked + label:after {
    position: absolute;
    top: -0.2em;
    left: 0.075em;
    background: transparent;
    font-weight: bold;
    font-size: 1.38em;
    line-height: $boxSize;
    content: "\2713";
    color: $neutral;
    color: $completedColor;
    transition: all $duration;
  }

  /* checked mark aspect changes */
  [type="checkbox"]:not(:checked) + label:after {
    opacity: 0;
    transform: scale(0);
  }

  [type="checkbox"]:checked + label:after {
    opacity: 1;
    transform: scale(1);
  }

  /* Disabled checkbox */
  // [type="checkbox"]:disabled:not(:checked) + label:before,
  // [type="checkbox"]:disabled:checked + label:before {
  //   box-shadow: none;
  //   border-color: #bbb;
  //   background-color: #e9e9e9;
  // }

  // [type="checkbox"]:disabled:checked + label:after {
  //   color: #777;
  // }

  // [type="checkbox"]:disabled + label {
  //   color: #aaa;
  // }

  /* Accessibility */
  // [type="checkbox"]:checked:focus + label:before,
  // [type="checkbox"]:not(:checked):focus + label:before {
  //   box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1), 0 0 0 6px rgba(203, 34, 237, 0.2);
  // }
}

.task__details_container {
  position: relative;
  display: inline;
}

.task__details {
  display: none;
  grid-column: 1 / 4;
  padding: $padding;
  @include border();
  background-color: get-color(base, light);

  .details__header {
    color: get-color(base, dark);
    margin: 0;
  }

  .description {
    color: get-color(base, dark);
    font-size: 1rem;
  }
}

.show {
  display: inline-block;
}

.hide {
  display: none;
}

.more {
  display: inline;
  cursor: pointer;
}

.hasRecurrence {
  margin: 0;
  padding: 0;
  visibility: hidden;
  .show {
    visibility: visible;
  }
}

.topbar {
  display: flex;
  justify-content: space-between;

  & button {
    color: inherit;
  }
}
